{"pageProps":{"post":{"slug":"22","content":"Function Calling が説明等を読んでもイマイチよくわからなかったので実際に試してみた。これはその時のメモ。\n\n今回は次の公式ドキュメントの手順をやってみた。\n\nhttps://platform.openai.com/docs/guides/function-calling\n\nまた、次の日本語解説記事が参考になった。\n\nhttps://dev.classmethod.jp/articles/understand-openai-function-calling/\n\n## セットアップ\n\n今回、実行環境は Google Colab にした。\n\nまずは OpenAI ライブラリをインストール。\n\n```\n!pip install openai\n```\n\n続いて、各種ライブラリのインポートと OpenAI クライアントを作成。\n\n```python\nimport json\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=OPENAI_API_KEY\n)\n```\n\nOpenAI API Key は次のページで作成できる:\n\n> [API keys - OpenAI API](https://platform.openai.com/api-keys)\n\n今回、 Function Calling の動作確認用に次のダミー関数を利用した。\n\n```python\n# Example dummy function hard coded to return the same weather\n# In production, this could be your backend API or an external API\ndef get_current_weather(location, unit=\"fahrenheit\"):\n    \"\"\"Get the current weather in a given location\"\"\"\n    if \"tokyo\" in location.lower():\n        return json.dumps({\"location\": \"Tokyo\", \"temperature\": \"10\", \"unit\": \"celsius\"})\n    elif \"san francisco\" in location.lower():\n        return json.dumps({\"location\": \"San Francisco\", \"temperature\": \"72\", \"unit\": \"fahrenheit\"})\n    elif \"paris\" in location.lower():\n        return json.dumps({\"location\": \"Paris\", \"temperature\": \"22\", \"unit\": \"celsius\"})\n    else:\n        return json.dumps({\"location\": location, \"temperature\": \"unknown\"})\n```\n\n## 全体像\n\n公式ドキュメントのコードの全体像は次のとおり:\n\n1. （AIが）質問に必要な関数を選び、引数を作成する\n1. （プログラムが）関数を実行\n1. （AIが）関数結果も入力に入れて質問に回答する\n\n> 引用: [[OpenAI] Function callingで遊んでみたら本質が見えてきたのでまとめてみた | DevelopersIO](https://dev.classmethod.jp/articles/understand-openai-function-calling/#:~:text=%E5%87%A6%E7%90%86%E3%81%A8%E3%81%AF-,%EF%BC%88AI%E3%81%8C%EF%BC%89%E8%B3%AA%E5%95%8F%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E9%96%A2%E6%95%B0%E3%82%92%E9%81%B8%E3%81%B3%E3%80%81%E5%BC%95%E6%95%B0%E3%82%92,%E9%96%A2%E6%95%B0%E7%B5%90%E6%9E%9C%E3%82%82%E5%85%A5%E5%8A%9B%E3%81%AB%E5%85%A5%E3%82%8C%E3%81%A6%E8%B3%AA%E5%95%8F%E3%81%AB%E5%9B%9E%E7%AD%94%E3%81%99%E3%82%8B,-%E3%81%A7%E3%81%99%E3%80%82%20AI%E3%81%AE)\n\n## STEP 1 ｜会話と利用可能な関数をモデルに送る\n\n公式ドキュメントのコード（日本語のコメントは自分で追記した）:\n\n```python\n# Step 1: send the conversation and available functions to the model\n\n# 会話\nmessages = [{\"role\": \"user\", \"content\": \"What's the weather like in San Francisco, Tokyo, and Paris?\"}]\n\n# 利用可能な関数\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_current_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\",\n                    },\n                    \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\n                },\n                \"required\": [\"location\"],\n            },\n        },\n    }\n]\n\n# モデルへ投げて回答を取得\nresponse = client.chat.completions.create(\n    model=\"gpt-3.5-turbo-1106\",\n    messages=messages,\n    tools=tools,\n    tool_choice=\"auto\",  # auto is default, but we'll be explicit\n)\n```\n\n`response` の中身はこんな感じ。今回はサンフランシスコ、東京、パリの3つの都市の天気を訊いているので、 `tool_calls` が3リクエスト分になっている。\n\n```python\n{\n  'id': 'chatcmpl-xxxxxxxxxx',\n  'choices': [\n    Choice(\n      finish_reason='tool_calls', \n      index=0, \n      message=ChatCompletionMessage(\n        content=None, \n        role='assistant', \n        function_call=None, \n        tool_calls=[\n          ChatCompletionMessageToolCall(\n            id='call_aaaaaaaaaa',\n            function=Function(\n              arguments='{\"location\": \"San Francisco\", \"unit\": \"celsius\"}', \n              name='get_current_weather'\n            ), \n            type='function'\n          ),\n          ChatCompletionMessageToolCall(\n            id='call_bbbbbbbbbb', \n            function=Function(\n              arguments='{\"location\": \"Tokyo\", \"unit\": \"celsius\"}', \n              name='get_current_weather'\n            ), \n            type='function'\n          ), \n          ChatCompletionMessageToolCall(\n            id='call_cccccccccc', \n            function=Function(\n              arguments='{\"location\": \"Paris\", \"unit\": \"celsius\"}', \n              name='get_current_weather'\n            ), \n            type='function'\n          )\n        ]\n      )\n    )\n  ],\n  'created': 1700895213,\n  'model': 'gpt-3.5-turbo-1106',\n  'object': 'chat.completion',\n  'system_fingerprint': 'fp_xxxxxxxxxx',\n  'usage': CompletionUsage(\n    completion_tokens=77, \n    prompt_tokens=88, \n    total_tokens=165\n  )\n}\n```\n\nこの中から次の2つを取り出す。\n\n```python\nresponse_message = response.choices[0].message\ntool_calls = response_message.tool_calls\n```\n\n次の処理に入る前に、 Function Calling が要求されているかのチェックが必要。\n\n```python\n# Step 2: check if the model wanted to call a function\nif tool_calls:\n  ...\n```\n\n## STEP 2 ｜実際に関数を実行する\n\n公式ドキュメント:\n\n```python\n# Step 3: call the function\n# Note: the JSON response may not always be valid; be sure to handle errors\navailable_functions = {\n    \"get_current_weather\": get_current_weather,\n}  # only one function in this example, but you can have multiple\nmessages.append(response_message)  # extend conversation with assistant's reply\n# Step 4: send the info for each function call and function response to the model\nfor tool_call in tool_calls:\n    function_name = tool_call.function.name\n    function_to_call = available_functions[function_name]\n    function_args = json.loads(tool_call.function.arguments)\n    function_response = function_to_call(\n        location=function_args.get(\"location\"),\n        unit=function_args.get(\"unit\"),\n    )\n    messages.append(\n        {\n            \"tool_call_id\": tool_call.id,\n            \"role\": \"tool\",\n            \"name\": function_name,\n            \"content\": function_response,\n        }\n    )  # extend conversation with function response\n```\n\n分解して見ていく。\n\n利用可能な関数の辞書を作成している。今回は `get_current_weather()` しか利用できないので、辞書内のアイテムは1つだけになる。\n\n```python\navailable_functions = {\n    \"get_current_weather\": get_current_weather,\n}  # only one function in this example, but you can have multiple\n```\n`available_functions` の中身は次のようになっている。関数がオブジェクトとして辞書に登録されている。\n\n```python\n{'get_current_weather': <function __main__.get_current_weather(location, unit='fahrenheit')>}\n```\n\nSTEP 1 で得た `response_message` を `message` に `append` している。これは STEP 3 で最終的な回答を作成するために使用する。\n\n```python\nmessages.append(response_message)  # extend conversation with assistant's reply\n```\n\nしたがって、 `messages` の中身は次のようになる。\n\n```python\n[\n  {\n    'role': 'user', \n    'content': \"What's the weather like in San Francisco, Tokyo, and Paris?\"\n  },\n  ChatCompletionMessage(\n    content=None, \n    role='assistant', \n    function_call=None, \n    tool_calls=[\n      ChatCompletionMessageToolCall(\n        id='call_aaaaaaaaaa',\n        function=Function(\n          arguments='{\"location\": \"San Francisco\", \"unit\": \"celsius\"}', \n          name='get_current_weather'\n        ), \n        type='function'\n      ),\n      ChatCompletionMessageToolCall(\n        id='call_bbbbbbbbbb', \n        function=Function(\n          arguments='{\"location\": \"Tokyo\", \"unit\": \"celsius\"}', \n          name='get_current_weather'\n        ), \n        type='function'\n      ), \n      ChatCompletionMessageToolCall(\n        id='call_cccccccccc', \n        function=Function(\n          arguments='{\"location\": \"Paris\", \"unit\": \"celsius\"}', \n          name='get_current_weather'\n        ), \n        type='function'\n      )\n    ]\n  )\n]\n```\n\nSTEP 1 で作成したリクエストをループで順次、実際に関数へリクエストしていく。\n\n```python\n# Step 4: send the info for each function call and function response to the model\nfor tool_call in tool_calls:\n  ...\n```\n\n実際に関数を実行する部分は次のコード。\n\n```python\n# 呼び出す関数を取得\nfunction_name = tool_call.function.name\nfunction_to_call = available_functions[function_name]\n\n# 関数に渡す引数を取得（引数は JSON 文字列で格納されているので json.loads() ）\nfunction_args = json.loads(tool_call.function.arguments)\n\n# 実際に関数を実行する\nfunction_response = function_to_call(\n    location=function_args.get(\"location\"),\n    unit=function_args.get(\"unit\"),\n)\n```\n\n関数の実行結果を `messages` へ `append` している。これは STEP 3 で最終的な回答を作成するためである。\n\n```python\nmessages.append(\n    {\n        \"tool_call_id\": tool_call.id,\n        \"role\": \"tool\",\n        \"name\": function_name,\n        \"content\": function_response,\n    }\n)  # extend conversation with function response\n```\n\nループ終了時の `messages` の中身は次のようになっている。\n\n```python\n[{'role': 'user',\n  'content': \"What's the weather like in San Francisco, Tokyo, and Paris?\"},\n ChatCompletionMessage(content=None, role='assistant', function_call=None, tool_calls=[ChatCompletionMessageToolCall(id='call_aaaaaaaaaa', function=Function(arguments='{\"location\": \"San Francisco\", \"unit\": \"celsius\"}', name='get_current_weather'), type='function'), ChatCompletionMessageToolCall(id='call_bbbbbbbbbb', function=Function(arguments='{\"location\": \"Tokyo\", \"unit\": \"celsius\"}', name='get_current_weather'), type='function'), ChatCompletionMessageToolCall(id='call_cccccccccc', function=Function(arguments='{\"location\": \"Paris\", \"unit\": \"celsius\"}', name='get_current_weather'), type='function')]),\n {'tool_call_id': 'call_aaaaaaaaaa',\n   'role': 'tool',\n   'name': 'get_current_weather',\n   'content': '{\"location\": \"San Francisco\", \"temperature\": \"72\", \"unit\": \"fahrenheit\"}'},\n {'tool_call_id': 'call_bbbbbbbbbb',\n  'role': 'tool',\n  'name': 'get_current_weather',\n  'content': '{\"location\": \"Tokyo\", \"temperature\": \"10\", \"unit\": \"celsius\"}'},\n {'tool_call_id': 'call_cccccccccc',\n  'role': 'tool',\n  'name': 'get_current_weather',\n  'content': '{\"location\": \"Paris\", \"temperature\": \"22\", \"unit\": \"celsius\"}'}]\n```\n\n## STEP 3 ｜最終的な回答を作成する\n\n公式ドキュメントのコード:\n\n```python\nsecond_response = client.chat.completions.create(\n    model=\"gpt-3.5-turbo-1106\",\n    messages=messages,\n)  # get a new response from the model where it can see the function response\n```\n\nsecond_responseの中身:\n\n```python\n{\n  'id': 'chatcmpl-yyyyyyyyyy', \n  'choices': [\n    Choice(\n      finish_reason='stop', \n      index=0, \n      message=ChatCompletionMessage(\n        content='Currently, the weather in San Francisco is 72°F, in Tokyo it is 10°C, and in Paris it is 22°C.', \n        role='assistant', \n        function_call=None, \n        tool_calls=None\n      )\n    )\n  ],\n  'created': 1700895214,\n  'model': 'gpt-3.5-turbo-1106',\n  'object': 'chat.completion',\n  'system_fingerprint': 'fp_eeff13170a',\n  'usage': CompletionUsage(\n    completion_tokens=29, \n    prompt_tokens=169, \n    total_tokens=198\n  )\n}\n```\n\n`second_response.choices[0].message.content` を見てみると、関数の実行結果が回答に組み込まれていることがわかる。\n\n```python\n'Currently, the weather in San Francisco is 72°F, in Tokyo it is 10°C, and in Paris it is 22°C.'\n```\n\n## 何が嬉しいのか？\n\n（ほぼほぼ「 [[OpenAI] Function callingで遊んでみたら本質が見えてきたのでまとめてみた | DevelopersIO](https://dev.classmethod.jp/articles/understand-openai-function-calling/) 」に書かれていることではあるが…）\n\n例えば、今回のように自然言語で各都市の気温を問い合わせる仕組みを作る場合、 ChatGPT だけでは各都市の気温は答えられないので API 等で別途情報を取得してくる必要がある（補足）。そのため、問い合わせ文から API 等へのリクエストに必要な情報を抽出する必要があった。\n\n「 What's the weather like in San Francisco, Tokyo, and Paris? 」という質問の場合、（どのような情報がリクエストに必要かによるが）「 San Francisco 」「 Tokyo 」「 Paris 」の3つの情報を抽出する必要がある。\n\nFunction Calling が登場するまでは、プロンプトを工夫することで情報を抽出しやすくしていた。\n\n例えば次のプロンプトを用いたとする。\n\n```\n次の問い合わせ文から都市を抽出してください。出力フォーマットは次のようにしてください:\n\n## 出力フォーマット\n- 都市1\n- 都市2\n\n## 問い合わせ文\nWhat's the weather like in San Francisco, Tokyo, and Paris?\n```\n\nすると、 ChatGPT は次のように回答してくれる。\n\n```\n## 出力フォーマット\n- San Francisco\n- Tokyo\n- Paris\n```\n\n今回の気温の例は出力フォーマットがシンプルだったので比較的指定したフォーマットで回答してくれているが、複雑な出力フォーマットだったりすると指定したフォーマットにしたがってくれなかったりする。\n\nFunction Calling を使えば、引数の仕様を指定すればそれに合うように情報を抽出してくれる。例えば今回の場合、次のように情報を抽出してくれていた。\n\n```python\n[\n  ChatCompletionMessageToolCall(\n    id='call_aaaaaaaaaa',\n    function=Function(\n      arguments='{\"location\": \"San Francisco\", \"unit\": \"celsius\"}', \n      name='get_current_weather'\n    ), \n    type='function'\n  ),\n  ChatCompletionMessageToolCall(\n    id='call_bbbbbbbbbb', \n    function=Function(\n      arguments='{\"location\": \"Tokyo\", \"unit\": \"celsius\"}', \n      name='get_current_weather'\n    ), \n    type='function'\n  ), \n  ChatCompletionMessageToolCall(\n    id='call_cccccccccc', \n    function=Function(\n      arguments='{\"location\": \"Paris\", \"unit\": \"celsius\"}', \n      name='get_current_weather'\n    ), \n    type='function'\n  )\n]\n```\n\n## 補足: 今は Browse with Bing のおかげで ChatGPT 単体での回答が可能になっている\n\n現在では ChatGPT に「 Browse with Bing 」機能が搭載されているため、 LLM 単体でも回答が可能となっている。\n\n例えば、今回の「 What's the weather like in San Francisco, Tokyo, and Paris? 」という質問を ChatGPT (ChatGPT Plus 加入版) に投げてみたところ、次の回答が得られた:\n\n> 現在の天気について、以下の都市の情報は次の通りです：\n> \n> サンフランシスコ（カリフォルニア州、アメリカ）：気温は57°F（約14°C）で、部分的に雲があります。今後の予報では最高気温が66°F（約19°C）、最低気温が49°F（約9°C）となる見込みです。風速は北東から5mph（約8km/h）です[\\[”\\]](https://www.timeanddate.com/weather/usa/san-francisco#:~:text=Weather%20Today%20Weather%20Hourly%2014,hour%20forecast%20for%20next%20week)。\n> \n> 東京（日本）：気温は60°F（約16°C）で、涼しいです。今後の予報では最高気温が76°F（約24°C）、最低気温が48°F（約9°C）となる見込みです。風速は南から9mph（約14km/h）です[\\[”\\]](https://www.timeanddate.com/weather/japan/tokyo#:~:text=Weather%20Today%20Weather%20Hourly%2014,for%20the%20next%202%20weeks)。\n> \n> パリ（フランス）：気温は41°F（約5°C）で、一部に雲があります。体感温度は39°F（約4°C）です。今後の予報では最高気温が56°F（約13°C）、最低気温が40°F（約4°C）となる見込みです。風速は北西から3mph（約5km/h）です[\\[”\\]](https://www.timeanddate.com/weather/france/paris#:~:text=Weather%20Today%20Weather%20Hourly%2014,hour%20forecast%20for%20next%20week)。\n> \n> これらの情報は、各都市の現在の気象条件を反映しています。天候は変わりやすいので、最新の情報を得るためには、定期的に天気予報を確認することをお勧めします。\n\n\n","title":"Function Calling 触ってみたメモ","posted_at":"2023年11月25日 20時54分","updated_at":"","tags":[],"description":"Function Calling が説明等を読んでもイマイチよくわからなかったので実際に試してみた。これはその時のメモ。  今回は次の公式ドキュメントの手順をやってみた。    また、次の日本語解説記事が参考になった。    ## セットアップ  今回、実行環境は Google Colab にした。  まずは OpenAI ライブラリをインストール。  ``` !pip install opena..."},"config":{"blog_title":"yamamoto-yuta.github.io","site_introduction":"Yamamoto's personal blog","copylight_name":"YutaYamamoto","copylight_url":"https://github.com/yamamoto-yuta","issues_page_url":"https://github.com/yamamoto-yuta/yamamoto-yuta.github.io/issues","favicon_image_url":"https://user-images.githubusercontent.com/55144709/217254968-e131c8d3-3846-4569-8d05-06ccdba503a5.png","author_name":"Yuta Yamamoto","author_introduction":"It's me.","avatar_image_url":{"url":"https://user-images.githubusercontent.com/55144709/217254968-e131c8d3-3846-4569-8d05-06ccdba503a5.png","path":"/static/images/config/avatar.webp"},"sns":[{"name":"GitHub","url":"https://github.com/yamamoto-yuta"},{"name":"Twitter","url":"https://twitter.com/__Y4M4MOTO__"},{"name":"Facebook","url":"https://www.facebook.com/atuXamamoto/"}]},"postsMap":{"16":{"slug":"16","title":"API経由でSlackへカスタム絵文字を追加できないか調査したときのメモ","tags":[],"posted_at":"2023年05月06日 25時56分","content":"","updated_at":"","description":""},"21":{"slug":"21","title":"executeScript() で呼ぶ関数の中で別ファイルの関数を呼び出したい","tags":[],"posted_at":"2023年08月05日 24時57分","content":"","updated_at":"","description":""},"23":{"slug":"23","title":"Slack の Slash Commands 作成メモ","tags":[],"posted_at":"2023年11月25日 26時45分","content":"","updated_at":"","description":""},"24":{"slug":"24","title":"Trello + Discord 連携メモ","tags":[],"posted_at":"2023年11月29日 09時10分","content":"","updated_at":"","description":""},"31":{"slug":"31","title":"SlackDeckの通知多重で鳴っちゃう問題で詰んだ話","tags":[],"posted_at":"2023年12月03日 17時39分","content":"","updated_at":"","description":""},"32":{"slug":"32","title":"Selenium+Python環境をDockerで作ったときのメモ","tags":[],"posted_at":"2023年12月03日 17時43分","content":"","updated_at":"","description":""},"34":{"slug":"34","title":"SQL の CTE の依存関係を JavaScript で可視化してみる","tags":[],"posted_at":"2024年02月25日 20時53分","content":"","updated_at":"","description":""},"35":{"slug":"35","title":"Docker で clasp 環境を構築する","tags":[],"posted_at":"2024年03月03日 25時13分","content":"","updated_at":"","description":""},"36":{"slug":"36","title":"NuPhy Air75 V2 キーボードを買ったので、キー割り当てメモ","tags":[],"posted_at":"2024年03月22日 26時27分","content":"","updated_at":"","description":""},"37":{"slug":"37","title":"Clasp 環境下で Slack API を使ってメッセージを送受信する","tags":[],"posted_at":"2024年03月24日 25時56分","content":"","updated_at":"","description":""}},"metadata":{"https://tech.yappli.io/entry/decoding-multi-encoded-urls":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"BigQuery内にある多重エンコードされたURLのデコード - Yappli Tech Blog","description":"こんにちは！データサイエンティストの山本です（ @__Y4M4MOTO__ ）です。 今回は、ヤプリのデータ基盤内にあるウェブビューURLのデコードに取り組んでみました。この記事では、その際につまづいたポイントやその解決策について記します。 ウェブビューURLのエンコード問題 最初のデコード方法｜単純にデコードする 次のデコード方法｜ %25 だけ先にデコードする 最終的なデコード方法｜ r’%25(25)* で先にデコードする まとめ ウェブビューURLのエンコード問題 ヤプリではアプリ内のスクリーンデータを計測しています。これにより、スクリーンビューの集計等の分析を行うことができます。スク…","image_url":"/static/images/external_ogp//fefc59882c98a9c97a4892622419eae4.webp","site_name":"Yappli Tech Blog"},"https://note.com/times_yappli/n/n35e1f320ba35":{"url_domain":"note.com","url_domain_link":"https://note.com","title":"新卒メンバー企画！「部活動紹介ランチ」とその誕生秘話 #今日のヤプリ｜#times_yappli","description":"こんにちは、4月に23新卒データサイエンティストとして入社したもっさん（ @__Y4M4MOTO__ ）です！  今回は、23新卒メンバーで企画・運営した『あなたの好きを見つけよう！23卒企画部活動紹介ランチ』についてご紹介したいと思います！  「部活動紹介ランチ」ってどんなイベント？  そもそも『部活動紹介ランチ』ってどんなイベントなのか？をご紹介します！ 部活動紹介ランチとは、その名の通りヤプリの部活動を紹介するランチ会です。ご飯を食べながら、各部の代表者の3分プレゼンを聞き、部員との交流会を実施しました！ 「部活動紹介ランチ」のイベント概要 イベント企画の誕生経緯  このイベント","image_url":"/static/images/external_ogp//27232b680e47836c12adfb5f940b60a5.webp","site_name":"note（ノート）"},"https://qiita.com/yamamoto-yuta/items/826de40c414655e19ced":{"url_domain":"qiita.com","url_domain_link":"https://qiita.com","title":"CSV テキストと Markdown Table をキーボードショートカットで相互変換できる Chrome 拡張機能作ってみた #JavaScript - Qiita","description":"CSV テキストと Markdown Table をキーボードショートカットで相互変換できる Chrome 拡張機能作ってみました。この記事では、作ったものの仕組みや開発にあたって工夫・苦労した点な…","image_url":"/static/images/external_ogp//35bda613446bfdd16efd908632f3938d.webp","site_name":"Qiita"},"https://qiita.com/yamamoto-yuta/items/412b6e8167758e174d0a":{"url_domain":"qiita.com","url_domain_link":"https://qiita.com","title":"Docker で dbt プロジェクトを始める方法をいくつか試してみた #Docker - Qiita","description":"この記事は何？Docker を使った dbt 環境の構築方法には様々なものがあります（公式の dbt イメージを使う、 Python イメージに dbt をインストールする、 etc...）。こ…","image_url":"/static/images/external_ogp//b8b958e37334b0e62cca43c00f0f696e.webp","site_name":"Qiita"},"https://tech.yappli.io/entry/tech-book-lt-understand-docker":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"「『Docker よくわからない』を終わりにする本」を読んだので社内LT発表してきた話 - Yappli Tech Blog","description":"こんにちは！データサイエンティストの山本（ @__Y4M4MOTO__ ）です。 プロダクト開発本部では毎月「プラットフォーム技術共有会」という技術共有の場が設けられています。以前、下記の技術書を読んでこちらの会で発表してきました。 zenn.dev この記事では、その時発表した利用を公開しています（発表したのが昨年なので、情報が古くなっている可能性があります。ご了承ください🙇）。 speakerdeck.com 以下、発表資料をテキストに直したものです。 どんな本？ [Q.] どんな本？ [A.] 「Docker よくわからない」を終わりにする本。 [Q.] 読んでみてどうだった？ [A.]…","image_url":"/static/images/external_ogp//13638c9601be9a316f4582e79852ecbf.webp","site_name":"Yappli Tech Blog"},"https://tech.yappli.io/entry/extract-app-store-review-to-spreadsheet-by-trocco":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"trocco で App Store のレビューをスプレッドシートへ書き出す - Yappli Tech Blog","description":"こんにちは！データサイエンティストの山本（ @__Y4M4MOTO__ ）です。 ヤプリは去年、 レビューダイアログ機能 をリリースしました。これによりレビューを用いた効果検証を行いたい場面が増えています。そのため、現在、 iTunes Search API と trocco を使って毎日アプリの評価点数を取得しています。 しかし、この記事を執筆している 2023年5月30日時点では iTunes Search API でレビューのコメントなどは取得できません。基本的に評価点数があれば十分ではあるのですが、コメントなどの訂正情報が欲しい場合もあります。 そこで、今回は trocco を使って …","image_url":"/static/images/external_ogp//1bac9454c8ebdd65cb94200b031ab077.webp","site_name":"Yappli Tech Blog"},"https://tech.yappli.io/entry/lightning-talk-8":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"プロダクト開発本部LT大会#8を開催しました - Yappli Tech Blog","description":"こんにちは！データサイエンティストの山本です（ @__Y4M4MOTO__ ）。 先日、プロダクト開発本部で LT 大会が開催されました。8回目を迎えた今回も、プロダクト開発本部を始めとして他部署の方々も参加してくださり大盛況でした！ この記事では、当日の様子やその発表内容などについてご紹介したいと思います。 どんな大会？ LT 大会は5分程度の短いプレゼン（ライトニングトーク）を行うイベントです。プロダクト開発本部の LT 大会は次のルールで開催されています: 発表者及び発表者順は基本挙手制 発表時間は1人5分目安 発表内容は自由 発表内容が自由ということで、毎回、自己紹介や過去の経験談、個…","image_url":"/static/images/external_ogp//bec037281cca17480c802a8c8bc6d991.webp","site_name":"Yappli Tech Blog"},"https://zenn.dev/aidemy/articles/425cf7d9f31945":{"url_domain":"zenn.dev","url_domain_link":"https://zenn.dev","title":"質問対応業務を DX した話","description":null,"image_url":"/static/images/external_ogp//aa81bc208d05362be368f8703ccbc63b.webp","site_name":"Zenn"},"https://tech.yappli.io/entry/gig-program2022":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"内定者インターン生が G.I.G. プログラムに参加して Professional Data Engineer 認定資格を取得した話 - Yappli Tech Blog","description":"Google Cloud Japan 様主催の G.I.G. Japan Program というトレーニングプログラムに内定者インターン生が参加し、 Google Cloud Professional Data Engineer 認定資格をした体験記です。","image_url":"/static/images/external_ogp//8252492c363e32205e801495bfce4867.webp","site_name":"Yappli Tech Blog"},"https://tech.yappli.io/entry/optimize_notifications_release_time":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"インターン生がプッシュ通知の配信時刻最適化に取り組んでみた！ - Yappli Tech Blog","description":"はじめに 初めまして。長岡技術科学大学の山本（ もっさん / @__Y4M4MOTO__ ）と申します。9 月中旬から 11 月までの 2 カ月半、プロダクト開発本部の技術戦略室にて、データサイエンティストのインターンをさせていただきました。この記事では、私がインターン中に取り組んだ「プッシュ通知の配信時刻最適化 PoC」の話をしたいと思います。 背景 Yappliの主要機能の1つにプッシュ通知があります。今回、クライアントの満足度向上のために、プッシュ通知の開封率を高める手段を検証しました。アイデアとして、以下を考えました。 ユーザがすぐ開封しやすい時間を推定し、その時間にプッシュ通知を配信…","image_url":"/static/images/external_ogp//5982363a6569af359c39495408362211.webp","site_name":"Yappli Tech Blog"},"https://github.com/yamamoto-yuta/csv2md-shortcut/issues/35":{"url_domain":"github.com","url_domain_link":"https://github.com","title":"popup でも変換できるようにする · Issue #35 · yamamoto-yuta/csv2md-shortcut · GitHub","description":"ブラウザ以外のエディタでもサクッと使いたいので。","image_url":"/static/images/external_ogp//9ad5ca706cab231c15e8cb46dfe2bf0f.webp","site_name":"GitHub"},"https://github.com/yamamoto-yuta/chrome-extension-injected-code-debug":{"url_domain":"github.com","url_domain_link":"https://github.com","title":"GitHub - yamamoto-yuta/chrome-extension-injected-code-debug","description":"Contribute to yamamoto-yuta/chrome-extension-injected-code-debug development by creating an account on GitHub.","image_url":"/static/images/external_ogp//860351a12e290ae311686c939c45298c.webp","site_name":"GitHub"},"https://tech.yappli.io/entry/yapplitechconf2023-data":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"「次の10年を戦える分析用データ基盤構築の第一歩 - dbtによる基盤刷新とクエリ費用90%削減への取り組み -」という発表をしてきました！  #Yappli Tech Conference 2023 - Yappli Tech Blog","description":"こんにちは！プロダクト開発本部・データサイエンティストの山本（@__Y4M4MOTO__ ）です。 先日開催された Yappli Tech Conference 2023 にて、 「次の10年を戦える分析用データ基盤構築の第一歩 - dbtによる基盤刷新とクエリ費用90%削減への取り組み -」というタイトルで発表してきました！（色々詰め込んだら発表タイトルが長くなってしまいました…😇） この記事では、そのときの発表動画と資料を公開しています！ アーカイブ動画 youtu.be スライド speakerdeck.com 発表概要 本発表では次の2つについてお話ししています。 ヤプリの分析用データ…","image_url":"/static/images/external_ogp//642a1ee5c7fa2a9c6fd11a82fb3ccfc6.webp","site_name":"Yappli Tech Blog"},"https://dev.classmethod.jp/articles/understand-openai-function-calling/":{"url_domain":"dev.classmethod.jp","url_domain_link":"https://dev.classmethod.jp","title":"[OpenAI] Function callingで遊んでみたら本質が見えてきたのでまとめてみた | DevelopersIO","description":"Function callingというよりFunction call preparingでした。","image_url":"https://devio2023-media.developers.io/wp-content/uploads/2023/04/eyecatch_openai_1200x630.png","site_name":"クラスメソッド発「やってみた」系技術メディア | DevelopersIO"},"https://ngrok.com/download":{"url_domain":"ngrok.com","url_domain_link":"https://ngrok.com","title":"Download","description":null,"image_url":null,"site_name":null},"https://ngrok.com/docs/errors/err_ngrok_6022/":{"url_domain":"ngrok.com","url_domain_link":"https://ngrok.com","title":"ERR_NGROK_6022 | ngrok documentation","description":"Message","image_url":"/static/images/external_ogp//3bc3eb06ac879a94e187d8c615205e93.webp","site_name":null},"https://qiita.com/yamamoto-yuta/items/474e03cd28dec55fd5a2":{"url_domain":"qiita.com","url_domain_link":"https://qiita.com","title":"trocco のカスタム変数ループ実行で複数の BigQuery テーブルを一括クローンする #BigQuery - Qiita","description":"この記事は trocco Advent Calendar 2023 の 2 日目の記事となります。この記事では、trocco のカスタム変数ループ実行を使い、複数の BigQuery テーブルを一…","image_url":"/static/images/external_ogp//6a429ed641210952ac59c2db89b32030.webp","site_name":"Qiita"},"https://tech.yappli.io/entry/lightning-talk-10":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"プロダクト開発本部LT大会#10を開催しました - Yappli Tech Blog","description":"（本記事は Yappli Advent Calendar 2023 （2枚目） の2日目の記事です！🎄📅） こんにちは！データサイエンティストの山本（ @__Y4M4MOTO__ ）です。 先日、プロダクト開発本部にてLT大会を開催しました！（遂に10回目です！✨） 今回はなんと取締役執行役員CTOのげんきさんが久々に発表者エントリー！！さらに、当日の飛び入りエントリーもあり、発表者と聴講参加者合わせて約 50 人もの方々にご参加いただきました！🙌 この記事では、当日の様子やその発表内容などについてご紹介します！ どんな大会？ 発表内容 PICK UP! 『ゴミの日リマインダー』 『植物を育て…","image_url":"/static/images/external_ogp//3b22aeddd0ff17d06ce6b89971485537.webp","site_name":"Yappli Tech Blog"},"https://chrome.google.com/webstore/detail/slackdeck/cocnkjpcbmoopfpmogblnjpjdfcaohod":{"url_domain":"chrome.google.com","url_domain_link":"https://chrome.google.com","title":"SlackDeck - Chrome Web Store","description":"Arrange channels side-by-side","image_url":"/static/images/external_ogp//7a7aa934b286dbd42fc111be0535c790.webp","site_name":null},"https://tech.yappli.io/entry/zapier-slack-to-jira-with-azure-openai":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"Zapier を使って Slack → Jira 起票＆ Azure OpenAI Service でチケットタイトル生成 - Yappli Tech Blog","description":"（本記事は Yappli Advent Calendar 2023 （1枚目） の5日目の記事です！🎄📅） こんにちは！データサイエンティストの山本（ @__Y4M4MOTO__ ）です。 最近、データサイエンスチーム（以下、 DS チーム）では社内からの依頼（集計、技術相談 etc. ）を Jira でチケット管理をするようにしました。チケット運用を始めるにあたってネックになったのが「起票するの、面倒くさくない…？」という点です。 その点を解決するため、 Slack のメッセージにリアクションを押すとその内容で Jira のチケットを作成してくれる Zapier ワークフローを作成しました。…","image_url":"/static/images/external_ogp//ad87198dd41d620ae8a30d78a13c55e2.webp","site_name":"Yappli Tech Blog"},"https://note.com/times_yappli/n/nfc3839fc0544":{"url_domain":"note.com","url_domain_link":"https://note.com","title":"ヤプリもSlack コミュニケーションガイドラインをつくった話｜#times_yappli","description":"こんにちは！23卒データサイエンティストのもっさん（ @__Y4M4MOTO__ ）です！  この度、ヤプリも社内でのSlackコミュニケーションをより円滑にするためのガイドラインをつくりました〜🎉  私もガイドラインの策定に携わったので、その経緯や過程、展開した後の社内の反応などについて、この記事でご紹介できればと思います！  ルールをつくったきっかけ  私がガイドラインづくりに携わったきっかけは、新卒 BootCamp でカスタマーサクセス本部の定例に出席したことです。その回の定例にて、 Slack でのメンションの取り扱いが議題に上がりました。  従来はお休み中の人へのメンション","image_url":"/static/images/external_ogp//7359ff90c9fd7dbb73c767e9dcdf806a.webp","site_name":"note（ノート）"},"https://qiita.com/yamamoto-yuta/items/593e70a832733df5e9a1":{"url_domain":"qiita.com","url_domain_link":"https://qiita.com","title":"trocco のカスタム変数ループ実行で BigQuery に作成した UDF をコピーする #BigQuery - Qiita","description":"※ この記事は trocco® Advent Calendar 2023 シリーズ2 、 Yappli Advent Calendar 2023 （2枚目）の 20 日目の投稿です。この記事では、…","image_url":"/static/images/external_ogp//a05a4625bbda19906d7edd3ef6ba0135.webp","site_name":"Qiita"},"https://note.com/dd_techblog/n/n3876f38cc5fc":{"url_domain":"note.com","url_domain_link":"https://note.com","title":"SQLスクリプト上でのテーブルや共通テーブル式の依存関係を可視化する｜Dentsu Digital Tech Blog","description":"電通デジタルでデータサイエンティストを務める吉田です。 こちらはDentsu Digital Tech Blogアドベントカレンダー16日目の記事です。   今回はSQLスクリプトを解析して参照されているテーブルや共通テーブル式の依存関係を可視化するツールを作成したのでご紹介いたします。   どのようなものを作ったか  電通デジタルデータサイエンスグループでは普段、主にBigQuery上でSQLスクリプトを記述してデータの抽出や集計・整形作業を行うことが多いです。   最近ではBigQuery MLでBoostingTreeやAutoML Tablesのモデルが作成できるようになるなど","image_url":"/static/images/external_ogp//c4664f94343898956e3ab7d3df306779.webp","site_name":"note（ノート）"},"https://github.com/yamamoto-yuta/sql-cte-visualizer?tab=readme-ov-file":{"url_domain":"github.com","url_domain_link":"https://github.com","title":"GitHub - yamamoto-yuta/sql-cte-visualizer","description":"Contribute to yamamoto-yuta/sql-cte-visualizer development by creating an account on GitHub.","image_url":"/static/images/external_ogp//28f798cf51f6276d4cb3ab020a8c6b91.webp","site_name":"GitHub"},"https://github.com/taozhi8833998/node-sql-parser":{"url_domain":"github.com","url_domain_link":"https://github.com","title":"GitHub - taozhi8833998/node-sql-parser: Parse simple SQL statements into an abstract syntax tree (AST) with the visited tableList and convert it back to SQL","description":"Parse simple SQL statements into an abstract syntax tree (AST) with the visited tableList and convert it back to SQL - taozhi8833998/node-sql-parser","image_url":"/static/images/external_ogp//02def1dc561894f82fa0e950b9ed3407.webp","site_name":"GitHub"},"https://zenn.dev/carenet/articles/d42b236ae69bc5":{"url_domain":"zenn.dev","url_domain_link":"https://zenn.dev","title":"SQLパーサーを使用してみた","description":null,"image_url":"/static/images/external_ogp//83803c4aa8a10a187949b1aa1ac241df.webp","site_name":"Zenn"},"https://qiita.com/kujirahand/items/eab914bc77cf1bc0837c":{"url_domain":"qiita.com","url_domain_link":"https://qiita.com","title":"PEG.jsを使う #PEG - Qiita","description":"パーサジェネレータのPEG.jsを使うと手軽に構文解析器が作れます。ここに使い方をメモしておきます。始め方PEG.jsはWeb上で試すことができ、そこで文法チェックができるのがJSならではの素…","image_url":"/static/images/external_ogp//cc2f0a8f25a3a2bb2f91509064248af4.webp","site_name":"Qiita"},"https://zenn.dev/yuji/articles/7eb96460317222":{"url_domain":"zenn.dev","url_domain_link":"https://zenn.dev","title":"【D3.js】 hierarchy で階層ツリーの作成・ノードハイライトの有効","description":null,"image_url":"/static/images/external_ogp//e2538f9949504ce6c6d1c7443a6f2932.webp","site_name":"Zenn"},"https://qiita.com/mmmmk/items/f7c70024938b0e38e4c9":{"url_domain":"qiita.com","url_domain_link":"https://qiita.com","title":"【JavaScript】手軽に綺麗な「要素を矢印で繋いだグラフ」を描く方法（画像付き） #JavaScript - Qiita","description":"概要JavaScriptでグラフ（ノードとエッジの集合の方）を作りたい。JavaScriptでグラフを描画できるd3-graphvizの使い方や、色変更などできることを調査した。基本の使い方…","image_url":"/static/images/external_ogp//70884159a21236a438fa28bf16f66038.webp","site_name":"Qiita"},"https://tech.yappli.io/entry/update-dbt-infra-dev-flow":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"dbt 基盤の開発フローを改善した話 - Yappli Tech Blog","description":"こんにちは！データサイエンスグループの山本です（ @__Y4M4MOTO__ ）です。 さて、ヤプリのデータサイエンスグループ（以下、DSグループ）では2023年から分析用データ基盤の dbt 移行に取り組んでいます。 dbt 移行に至った経緯などについては昨年開催された Yappli Tech Conference 2023 にて発表しているので、そちらをご覧いただければ幸いです。 tech.yappli.io dbt 移行に伴い、ヤプリの各種サービスが参照しているデータマートも dbt 移行後のものへ切り替えを行っています。 dbt 移行後の分析用データ基盤（以後、 dbt 基盤）の運用が…","image_url":"/static/images/external_ogp//8843a08bfdf8d6096506f9c793057798.webp","site_name":"Yappli Tech Blog"},"https://tech.yappli.io/entry/replace-ya-mart-to-dbt":{"url_domain":"tech.yappli.io","url_domain_link":"https://tech.yappli.io","title":"Yappli Analytics のデータマートを dbt へ切り替えた話 - Yappli Tech Blog","description":"こんにちは！データサイエンスグループの山本です（ @__Y4M4MOTO__ ）です。今年の4月で入社して1年が経ちました。あっという間ですね…。 さて、ヤプリのデータサイエンスグループ（以下、DSグループ）では2023年から分析用データ基盤の dbt 移行に取り組んでいます。 dbt 移行に至った経緯などについては昨年開催された Yappli Tech Conference 2023 にて発表しているので、そちらをご覧いただければ幸いです。 tech.yappli.io dbt 移行に伴い、ヤプリの各種サービスが参照しているデータマートも dbt 移行後のものへ切り替えを行っています。昨年1…","image_url":"/static/images/external_ogp//5491c78ddbe36683f9e644909a287ea2.webp","site_name":"Yappli Tech Blog"}},"relatedPosts":[{"slug":"23","title":"Slack の Slash Commands 作成メモ","tags":[],"posted_at":"2023年11月25日 26時45分","content":"","updated_at":"","description":""},{"slug":"36","title":"NuPhy Air75 V2 キーボードを買ったので、キー割り当てメモ","tags":[],"posted_at":"2024年03月22日 26時27分","content":"","updated_at":"","description":""},{"slug":"24","title":"Trello + Discord 連携メモ","tags":[],"posted_at":"2023年11月29日 09時10分","content":"","updated_at":"","description":""},{"slug":"21","title":"executeScript() で呼ぶ関数の中で別ファイルの関数を呼び出したい","tags":[],"posted_at":"2023年08月05日 24時57分","content":"","updated_at":"","description":""},{"slug":"32","title":"Selenium+Python環境をDockerで作ったときのメモ","tags":[],"posted_at":"2023年12月03日 17時43分","content":"","updated_at":"","description":""},{"slug":"37","title":"Clasp 環境下で Slack API を使ってメッセージを送受信する","tags":[],"posted_at":"2024年03月24日 25時56分","content":"","updated_at":"","description":""},{"slug":"35","title":"Docker で clasp 環境を構築する","tags":[],"posted_at":"2024年03月03日 25時13分","content":"","updated_at":"","description":""},{"slug":"34","title":"SQL の CTE の依存関係を JavaScript で可視化してみる","tags":[],"posted_at":"2024年02月25日 20時53分","content":"","updated_at":"","description":""},{"slug":"16","title":"API経由でSlackへカスタム絵文字を追加できないか調査したときのメモ","tags":[],"posted_at":"2023年05月06日 25時56分","content":"","updated_at":"","description":""},{"slug":"31","title":"SlackDeckの通知多重で鳴っちゃう問題で詰んだ話","tags":[],"posted_at":"2023年12月03日 17時39分","content":"","updated_at":"","description":""}]},"__N_SSG":true}